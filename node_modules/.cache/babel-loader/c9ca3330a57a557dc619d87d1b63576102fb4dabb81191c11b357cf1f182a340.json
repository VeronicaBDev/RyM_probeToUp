{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Totus Tuus Maria\\\\Desktop\\\\Cursadas SHY\\\\aCURSADA_2\\\\M2 Repo\\\\FT-M2-master\\\\06-React-Intro\\\\homework\\\\02 - Integration\\\\src\\\\components\\\\searchbar\\\\SearchBar.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchBar(props) {\n  _s();\n  const {\n    onSearch\n  } = props;\n  const [id, setId] = useState([]); // creamos el estado local\n  console.log('4 de SearchBar');\n  console.log(id);\n  function changeHandler(e) {\n    console.log('e');\n    console.log(e);\n    let newId = document.getElementById('inputSearchBar').value;\n    setId([...id, newId]);\n    //esta fc me cambiará el estado (q se llama characters): lo q en este caso, como \n    //characters es un [] me lo modifica, con spread operator, agregandome\n    //un nuevo elemento (un {})\n    // Tendré lo q tenia en  los estados previos y \n    // agregará uno nuevo\n    console.log('15 SearchBar agregó un Id');\n    console.log(id);\n  }\n  return (\n    /*#__PURE__*/\n    /*\n    <div>         \n    <input type='search' id='inputSearchBar'/>\n    <button onClick={changeHandler}>Agregar</button>\n    </div>\n    */\n    _jsxDEV(SearchConteiner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 3\n    }, this)\n  );\n}\n_s(SearchBar, \"0IlG3nv7EcfIueW49+bfYsYfADo=\");\n_c = SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","SearchBar","props","_s","onSearch","id","setId","console","log","changeHandler","e","newId","document","getElementById","value","SearchConteiner","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Totus Tuus Maria/Desktop/Cursadas SHY/aCURSADA_2/M2 Repo/FT-M2-master/06-React-Intro/homework/02 - Integration/src/components/searchbar/SearchBar.jsx"],"sourcesContent":["import {useState} from \"react\";\nexport default function SearchBar(props) {\n   const {onSearch} = props;\n   \n   const [id, setId] = useState([]); // creamos el estado local\n   console.log('4 de SearchBar' )\n   console.log(id)\n   \n   function changeHandler(e){\n      console.log('e');\n      console.log(e);\n      let newId = document.getElementById('inputSearchBar').value;\n\n      setId([...id, newId]); \n      //esta fc me cambiará el estado (q se llama characters): lo q en este caso, como \n      //characters es un [] me lo modifica, con spread operator, agregandome\n      //un nuevo elemento (un {})\n      // Tendré lo q tenia en  los estados previos y \n      // agregará uno nuevo\n      console.log('15 SearchBar agregó un Id')\n      console.log(id)\n   }\n\n\n   return (/*\n      <div>         \n         <input type='search' id='inputSearchBar'/>\n         <button onClick={changeHandler}>Agregar</button>\n      </div>\n   */\n  <SearchConteiner>\n   \n  </SearchConteiner>\n   );\n}\n"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC/B,eAAe,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACtC,MAAM;IAACC;EAAQ,CAAC,GAAGF,KAAK;EAExB,MAAM,CAACG,EAAE,EAAEC,KAAK,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClCS,OAAO,CAACC,GAAG,CAAC,gBAAiB,CAAC;EAC9BD,OAAO,CAACC,GAAG,CAACH,EAAE,CAAC;EAEf,SAASI,aAAaA,CAACC,CAAC,EAAC;IACtBH,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;IAChBD,OAAO,CAACC,GAAG,CAACE,CAAC,CAAC;IACd,IAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC,CAACC,KAAK;IAE3DR,KAAK,CAAC,CAAC,GAAGD,EAAE,EAAEM,KAAK,CAAC,CAAC;IACrB;IACA;IACA;IACA;IACA;IACAJ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxCD,OAAO,CAACC,GAAG,CAACH,EAAE,CAAC;EAClB;EAGA;IAAA;IAAQ;AACX;AACA;AACA;AACA;AACA;IACEL,OAAA,CAACe,eAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEC;EAAC;AAEpB;AAAChB,EAAA,CAjCuBF,SAAS;AAAAmB,EAAA,GAATnB,SAAS;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}